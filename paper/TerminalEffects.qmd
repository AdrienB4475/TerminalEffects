---
title: "Studying Terminal Effects in Northern Elephant Seals"
format:
  html:
    echo: false
    fig-width: 7
    fig-height: 5
    code-fold: true
    code-tools: true
    warning: false
    toc: true
editor: visual
---

#Introduction

#Downloading the Data

```{r}
#| label: setup
#Libraries: 
library(tidyverse)
library(dplyr)
library(ggplot2)
library(lme4)
library(cowplot)
library(car)
library(ggeffects)
library(brms)

sealdat <- read_csv(here::here("data/Adrien Data Pull 2024_12_06.csv"))

```

#Modified data:

```{r}
# #practice
# sealdat %>% filter(animalID == 170, observed == 1) %>% 
#   mutate(age = year - yearborn, 
#          max_age = max(age), 
#          bio_age = max_age - age) %>% view()

#Bioage clean
bioseal <- sealdat %>% filter(observed == 1, tagsex == "F") %>%
  group_by(animalID) %>%
  mutate(age = year - yearborn, 
         max_age = max(age), 
         bio_age = max_age - age, 
         terminal = ifelse(bio_age == 0, 1, 0),
         firstobsbreed = as.Date(firstobsbreed, format = "%Y-%m-%d"), 
         lastobsbreed = as.Date(lastobsbreed, format = "%Y-%m-%d"), 
         lactation_duration = as.numeric(difftime(lastobsbreed, firstobsbreed, units = "days"))) %>%
  filter(age > 2)

```

#Adult female population fig:

```{r}
#Create terminal to be a factor here 
pop_breed <- bioseal %>%
  group_by(age, terminal) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal")))

#Figure with age distribution with terminal as a factor to create a stacked barplot
pop_fig <- ggplot(pop_breed, aes(x = factor(age), y = n, fill = terminal_fct)) +
  geom_col() +
  labs(
    x = "Age",
    y = "Number of Individuals",
    fill = "Terminal Status",
    title = "# of Adult Females by Terminal Status"
  ) +
  theme_minimal(base_size = 15) +
  theme(
    panel.grid.major = element_line(color = "pink", linewidth = 0.3),  
    panel.grid.minor = element_blank(),  
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),  
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.text.x = element_text(color = "#7F8C8D", size = 12),  
    axis.text.y = element_text(color = "#7F8C8D", size = 12),
    plot.title = element_text(hjust = 0.5, size = 18, face = "italic", color = "purple"),  
    legend.title = element_text(size = 12, face = "bold", color = "purple"),
    legend.text = element_text(size = 12, color = "purple")
  ) +
  scale_fill_manual(values = c("Nonterminal" = "#6DD5B3", "Terminal" = "#D5A6F6"))

print(pop_fig)
```

#Lactation Duration data set

```{r}
lact_dat <- bioseal %>%
  filter(lactation_duration > 0) %>%
  dplyr::select(animalID,
                    bio_age,
                    lactation_duration,
                    year)

```

In some species terminal investment shows only in early years of reproduction, or during prime ages for breeding but often not in older ages due to senescence

New Idea:\
We want to create a threshold that has a prime age threshold in the figure. Ideally, it should show chronological age on the x axis and lactation duration on the y axis.

However, since we only were interested in looking at the last years of life to examine terminal investment we FILTERED out animals as bio_age \> 0. We still looked at chronological age to see how lactation duration changes in the last years of life among different age classes. We potentially will define animals as YOUNG OR OLD also to make it binomial.

POST MAX:

We will have :

L be lactation duration

A = chronological age

T = terminal (0 or 1 to create a yes no situation)

C = age category (young or old) we define young as ages 3-7 and old as 8+

In order to graph this we will look at L \~ Gamma(mean, sd)... mean = overall mean +coefficient for chronological age

```{r}
#First let's modify our data set for this graph 
maturity <- 6
lact_dat <- bioseal %>% 
  filter(lactation_duration > 0 & lactation_duration < 45) %>% 
  dplyr::select(animalID, bio_age, lactation_duration, year, pupsex, Wt, age) %>% 
  mutate(terminal = ifelse(bio_age == 0, 1, 0), 
         ageclass = ifelse(age <= maturity, "inexperienced", "experienced"),
         age10 = (age - maturity) / 10, 
         year_fct = factor(year))

#Negative Binomial model
lac_mod <- glmer.nb(
  lactation_duration ~ age10 + age10:ageclass + terminal:ageclass + (1 | year) ,
  data = lact_dat
)

summary(lac_mod)
summary(lac_mod)$coefficients


#creating prediction grid (so that we can use confidence intervals later)
lac_grid <- expand_grid(
  age = 3:22, 
  terminal = 0:1) %>% 
  mutate(age10 = (age - maturity) / 10, 
         ageclass = ifelse(age <= maturity, "inexperienced", "experienced"))


lac_years <- count(lact_dat, year_fct)

#create population predictions 
lac_pred_pop <- lac_grid %>% 
  mutate(predicted = predict(lac_mod, 
                             newdata = lac_grid, 
                             re.form = NA,
                             type = "response"),
         terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal")))

```

#Lactation Duration fig:

```{r}
# Predictions vs Raw Data Plot
lact_summ <- lact_dat %>% 
  ungroup() %>% 
  mutate(terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))) %>% 
  group_by(age, terminal_fct, ageclass) %>% 
  summarize(mean_lact = mean(lactation_duration),
            se_lact = sd(lactation_duration) / sqrt(n()),
            .groups = "drop") %>% 
  mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))


#Fixed Figure to make key clearer
lac_plot <- ggplot(lac_pred_pop, aes(x = age, y = predicted)) +
  
  # Pointrange with dashed error bars by terminal status (but no legend entry)
  geom_pointrange(
    data = lact_summ,
    aes(
      y = mean_lact,
      ymin = mean_lact - 1.96 * se_lact,
      ymax = mean_lact + 1.96 * se_lact,
      color = ageclass,
      linetype = terminal_fct
    ),
    show.legend = FALSE  # prevents cluttering the legend
  ) +
  geom_line(aes(
    linetype = terminal_fct,
    color = ageclass
  ), linewidth = 1.2) +
  geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +

  # Aesthetic styling
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#F9F9F9"),
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.text.x  = element_text(color = "#7F8C8D", size = 12),
    axis.text.y  = element_text(color = "#7F8C8D", size = 12),
    plot.title   = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD"),
    legend.title = element_text(size = 13, face = "bold"),
    legend.text  = element_text(size = 11)
  ) +

  # Axis and legend labels
  labs(
    title = "Effect of Age on Lactation Duration",
    x = "Mother's Age (Years)",
    y = "Lactation Duration (days)",
    color = "Age Class",
    linetype = "Terminal Status"
  ) +

  # Distinct linetypes and color palette
  scale_linetype_manual(values = c("Nonterminal" = "solid", "Terminal" = "dotdash")) +
  scale_color_manual(values = c("#D5A6F6", "#6DD5B3")) +
  scale_fill_manual(values = c("#D5A6F6", "#9B59B6", "#66B2B2"))
print(lac_plot)
```

#Wean Weight fig:

```{r}
library(segmented)
library(lmerTest)

#Wean Weight Time!
wt_dat <- bioseal %>%
  dplyr::select(animalID, bio_age, lactation_duration, year, pupsex, Wt, age) %>% 
  filter(!is.na(Wt))%>%
  mutate(terminal = ifelse(bio_age == 0, 1, 0), 
         ageclass = ifelse(age <= maturity, "inexperienced", "experienced"),
         age10 = (age - maturity) / 10, 
         year_fct = factor(year))

#Hist was evenly distributed: using glmer because of this:
wt_mod <- lmer(
  Wt ~ age10 + age10:ageclass + terminal:ageclass + (1 | year) + (1 | animalID), 
  data = wt_dat,
  )
summary(wt_mod)

#Create our grid for prediction metrics 
wt_grid <- expand_grid(
  age = 3:22, 
  terminal = 0:1) %>% 
  mutate(age10 = (age - maturity) / 10, 
         ageclass = ifelse(age <= maturity, "inexperienced", "experienced"))



#create population predictions 
wt_pred_pop <- wt_grid %>% 
  mutate(predicted = predict(wt_mod,  
                             newdata = wt_grid, 
                             re.form = NA,    
                             type = "response"),
         terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal")))

#Now summary

wt_summ <- wt_dat %>% 
  ungroup() %>% 
  mutate(terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))) %>% 
  group_by(age, terminal_fct, ageclass) %>% 
  summarize(mean_wt = mean(Wt, na.rm = TRUE),  
    se_wt = sd(Wt, na.rm = TRUE) / sqrt(n()),  
    .groups = "drop"
  ) %>% 
  mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))

#Figure time! 
wt_fig <- ggplot(wt_pred_pop, aes(x = age, y = predicted)) +
  
  # Pointrange with dashed error bars based on terminal status
  geom_pointrange(
    data = wt_summ,
    aes(
      y = mean_wt, 
      ymin = mean_wt - 1.96 * se_wt, 
      ymax = mean_wt + 1.96 * se_wt, 
      linetype = terminal_fct,
      color = ageclass
    ),
    show.legend = FALSE  
  ) +
  geom_line(aes(
    linetype = terminal_fct,
    color = ageclass
  ), linewidth = 1.2) +
  geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +

  # Theme 
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#F9F9F9"),
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.text.x = element_text(color = "#7F8C8D", size = 12),
    axis.text.y = element_text(color = "#7F8C8D", size = 12),
    plot.subtitle = element_text(hjust = 0.5, size = 12, color = "purple"),
    plot.title = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD"),
    legend.title = element_text(size = 13, face = "bold"),
    legend.text = element_text(size = 11)
  ) +

  # Axis labels and legends
  labs(
    title = "Impact of Age on Wean Weight", 
    subtitle = "Terminal vs Non-Terminal",
    x = "Mother's Age (Years)", 
    y = "Wean Weight (kg)",
    color = "Age Class",
    linetype = "Terminal Status"
  ) +

  # My custom palette styling for lines and fill
  scale_linetype_manual(values = c("Nonterminal" = "solid", "Terminal" = "dotdash")) +
  scale_color_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2")) +
  scale_fill_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2"))
print(wt_fig)


```

#Wean Weight 2:

Were going to attempt trying to create a new wean weight dataset to incorporate three breakpoints:

```{r}
# #First.. lets change the dataset so we have 3 ageclasses: Leaving here so that i remember to edit using bayesian stats for summer
# 
# #I think we want to do Bayesian stats for the future which meansss lets do:
# # library(brms)
# # library(StanHeaders)
# # library(rstan)
# #We can probably keep the same dat
# wt_dat2 <- wt_dat %>%
#   mutate(
#     terminal = ifelse(bio_age == 0, 1, 0),
#     ageclass3 = case_when(
#       age >= 3 & age <= 6 ~ "inexperienced",
#       age >= 7 & age <= 13 ~ "prime",
#       age >= 14 ~ "experienced",
#       TRUE ~ NA_character_
#     ),
#     ageclass3 = factor(ageclass3, levels = c("inexperienced", "prime", "experienced")),
#     age10 = (age - maturity) / 10,
#     age10b = (age - maturity2) / 10,
#     year_fct = factor(year)
#   )
# 
# #New model/updated:
# wt_mod2 <- lmer(
#   Wt ~ age10:ageclass3 + terminal:ageclass3 + (1 | year) + (1 | animalID),
#   data = wt_dat2,
#   )
# summary(wt_mod2)
# 
# #Then recreate our grid with all three age classes:
# wt_grid2 <- expand_grid(
#   age = 3:22,
#   terminal = 0:1
# ) %>%
#   mutate(
#     age10 = (age - maturity) / 10,
#     ageclass3 = case_when(
#       age >= 3 & age <= 6 ~ "inexperienced",
#       age >= 7 & age <= 13 ~ "prime",
#       age >= 14 ~ "experienced"
#     ),
#     ageclass3 = factor(ageclass3, levels = c("inexperienced", "prime", "experienced"))
#   )
# 
# #Update predictions:
# wt_pred_pop2 <- wt_grid2 %>%
#   mutate(predicted = predict(wt_mod2,
#                              newdata = wt_grid2,
#                              re.form = NA,
#                              type = "response"),
#          terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal")))
# 
# #Now summary:
# wt_summ2 <- wt_dat2 %>%
#   ungroup() %>%
#   mutate(
#     terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))
#   ) %>%
#   group_by(age, terminal_fct, ageclass3) %>%
#   summarize(
#     mean_wt = mean(Wt, na.rm = TRUE),
#     se_wt = sd(Wt, na.rm = TRUE) / sqrt(n()),
#     .groups = "drop"
#   ) %>%
#   mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))
# 
# 
# #And figure:??
# wt_fig <- ggplot(wt_pred_pop2, aes(x = age, y = predicted)) +
# 
#   # Error bars and points from summary
#   geom_pointrange(aes(
#     y = mean_wt,
#     ymin = mean_wt - 1.96 * se_wt,
#     ymax = mean_wt + 1.96 * se_wt,
#     linetype = terminal_fct,
#     color = ageclass3
#   ), data = wt_summ2) +
# 
#   # Model prediction lines
#   geom_line(aes(
#     linetype = terminal_fct,
#     color = ageclass3
#   ), linewidth = 1.2) +
# 
#   # Vertical lines at maturity (age 6) and new threshold (age 11)
#   geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +  # Maturity
#   geom_vline(xintercept = 14, linetype = "dashed", color = "#9B59B6") +  # New threshold
# 
#   # Theme and aesthetic styling
#   theme_minimal() +
#   theme(
#     panel.background = element_rect(fill = "#F9F9F9"),
#     axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
#     axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
#     axis.text.x = element_text(color = "#7F8C8D", size = 12),
#     axis.text.y = element_text(color = "#7F8C8D", size = 12),
#     plot.subtitle = element_text(hjust = 0.5, size = 12, color = "purple"),
#     plot.title = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD")
#   ) +
# 
#   # Labels
#   labs(
#     title = "Impact of Age on Wean Weight",
#     subtitle = "Terminal vs Non-Terminal Mothers",
#     x = "Mother's Age (Years)",
#     y = "Wean Weight (kg)",
#     color = "Age Class",
#     linetype = "Terminal Status"
#   ) +
# 
#   # Color palette
#   scale_color_manual(values = c(
#     "inexperienced" = "#6DD5B3",
#     "prime" = "#9B59B6",
#     "experienced" = "#D5A6F6"
#   ))
# 
# print(wt_fig)
# 
# 
# #For our model though... we want
# # wt_mod_bayes <- brm(
# #   Wt ~ age10:ageclass3 + terminal:ageclass3 + (1 | year) + (1 | animalID),
# #   data = wt_dat2,
# #   family = gaussian(),
# #   chains = 4,
# #   cores = 4,
# #   iter = 2000,
# #   seed = 123
# # )
```

#Sex Ratios fig:

We hypothesize that young terminal moms will have a higher chance of giving birth to a male offspring sex ratio than non terminal moms. Whereas old terminal moms will produce less males compared to non terminal moms

```{r}
#Offspring sex ratio dataset
sex_dat <- bioseal %>%
  dplyr::select(animalID, bio_age, pupsex, age, year) %>% 
  filter(!is.na(pupsex)) %>%
  mutate(
    is_male = ifelse(pupsex == "M", 1, 0),  # 1 = male, 0 = female
    terminal = ifelse(bio_age == 0, 1, 0), 
    ageclass = ifelse(age <= maturity, "inexperienced", "experienced"),
    age10 = (age - maturity) / 10, 
    year_fct = factor(year)
  )


#Run our model: 
sex_mod <- glmer(
  is_male ~ age10 + age10:ageclass + terminal:ageclass + (1 | year_fct),
  family = binomial,
  data = sex_dat
)
summary(sex_mod)

#Now the grid 
sex_grid <- expand_grid(
  age = 3:22, 
  terminal = 0:1
) %>% 
  mutate(
    age10 = (age - maturity) / 10, 
    ageclass = ifelse(age <= maturity, "inexperienced", "experienced")
  )


#Better predicted values:
sex_pred_pop <- sex_grid %>%
  mutate(
    predicted_prob_male = predict(
      sex_mod, 
      newdata = sex_grid, 
      re.form = NA, 
      type = "response"
    ),
    terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))
  )

#Now summarize all this data
sex_summ <- sex_dat %>%
  ungroup() %>%
  mutate(terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))) %>%
  group_by(age, terminal_fct, ageclass) %>%
  summarize(
    prop_male = mean(is_male, na.rm = TRUE),
    se_prop = sqrt((prop_male * (1 - prop_male)) / n()), 
    .groups = "drop"
  ) %>%
  mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))


#And... magic plot?!??!
ggplot(sex_pred_pop, aes(x = age, y = predicted_prob_male)) +
  
  # Dashed SE bars by terminal status (hidden from legend)
  geom_pointrange(
    data = sex_summ,
    aes(
      y = prop_male, 
      ymin = prop_male - 1.96 * se_prop, 
      ymax = prop_male + 1.96 * se_prop, 
      linetype = terminal_fct,
      color = ageclass
    ),
    show.legend = FALSE
  ) +
  geom_line(aes(
    linetype = terminal_fct,
    color = ageclass
  ), linewidth = 1.2) +
  geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +

  # Theme
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#F9F9F9"),
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.text.x = element_text(color = "#7F8C8D", size = 12),
    axis.text.y = element_text(color = "#7F8C8D", size = 12),
    plot.subtitle = element_text(hjust = 0.5, size = 12, color = "purple"),
    plot.title = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD"),
    legend.title = element_text(size = 13, face = "bold"),
    legend.text = element_text(size = 11)
  ) +

  labs(
    title = "Offspring Sex Ratio by Maternal Age", 
    subtitle = "Terminal vs Non-Terminal Mothers",
    x = "Mother's Age (Years)", 
    y = "Probability Offspring is Male",
    color = "Age Class",
    linetype = "Terminal Status"
  ) +

  # Custom line types and colors
  scale_linetype_manual(values = c("Nonterminal" = "solid", "Terminal" = "dotdash")) +
  scale_color_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2")) +
  scale_fill_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2"))


#YIPPIEE 


```

Now I'm just going to change it all to 3 classes to see how that changes things..

Ok.. now heres the BIG cool challenge I want to take on next..

Did offspring of terminal moms have higher chance of survival???

```{r}
#I think i have to reuse sealdat.. havent touched this dat set in a MINNNN.. so lets modify her a lil


#This aint work


# # Clean and mutate the data
# surv_seal <- cleanseal %>%
#   group_by(animalID) %>%
#   mutate(age = year - yearborn,
#          max_age = max(age, na.rm = TRUE),
#          bio_age = max_age - age) %>%
#   ungroup()
# 
# #Then apply select
# surv_dat <- surv_seal %>%
#   dplyr::select(animalID, pupID, bio_age, year, pupsex, age) %>%  
#   filter(!is.na(pupsex)) %>%  
#   mutate(
#     is_survive = as.integer(pupID %in% animalID), 
#     terminal = ifelse(bio_age == 0, 1, 0),  
#     ageclass = case_when(
#       age <= maturity ~ "young",
#       age > maturity ~ "old",
#       TRUE ~ NA_character_
#     ),
#     ageclass = factor(ageclass, levels = c("young", "old")),  
#     age10 = (age - maturity) / 10,  
#     year_fct = factor(year)  
#   )
# 
# #Lets buff up our data maybe..
# surv_dat_balanced <- surv_dat %>%
#   bind_rows(surv_dat %>% filter(is_survive == 1) %>% sample_n(1472 - 55, replace = TRUE))  # Upsample the survived pups
# 
# surv_dat_balanced <- surv_dat %>%
#   mutate(weight = ifelse(is_survive == 1, 1472 / 55, 1))
# 
# 
# # Model using glmer
# surv_mod <- glmer(
#   is_survive ~ age10 + terminal:ageclass + (1 | year) + (1 | animalID),
#   family = binomial,
#   data = surv_dat_balanced,
#   weights = weight,
#   control = glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 5e5))
# )
# summary(surv_mod)
# 
# # Create a grid of age and terminal status combinations
# surv_grid <- expand_grid(
#   age = 3:22,  
#   terminal = 0:1  
# ) %>%
#   mutate(
#     age10 = (age - maturity) / 10,  
#     ageclass = ifelse(age <= maturity, "young", "old")  
#   )
# 
# # Generate predictions using the weighted model
# surv_pred_pop <- surv_grid %>%
#   mutate(
#     predicted_prob_survival = predict(
#       surv_mod, 
#       newdata = surv_grid, 
#       re.form = NA,  
#       type = "response"
#     ),
#     terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))
#   )
# 
# #Summarize all this ^^
# surv_summ <- surv_dat_balanced %>%
#   ungroup() %>%
#   mutate(terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))) %>%
#   group_by(age, terminal_fct, ageclass) %>%
#   summarize(
#     prop_surv = mean(is_survive, na.rm = TRUE),  # Proportion of survival
#     se_prop = sqrt((prop_surv * (1 - prop_surv)) / n()),  # Standard error of the proportion
#     .groups = "drop"
#   ) %>%
#   mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))  
# 
# 
# #And please work??
# ggplot(surv_pred_pop, aes(x = age, y = predicted_prob_survival)) +
#   geom_pointrange(aes(
#     y = prop_surv, 
#     ymin = prop_surv - 1.96 * se_prop, 
#     ymax = prop_surv + 1.96 * se_prop, 
#     linetype = terminal_fct,   
#     color = ageclass
#   ), surv_summ) +
#   geom_line(aes(
#     linetype = terminal_fct,    
#     color = ageclass            
#   ), linewidth = 1.2) +     
#   geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +  
# 
#   theme_minimal() +
#   theme(
#     panel.background = element_rect(fill = "#F9F9F9"),
#     axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
#     axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
#     axis.text.x = element_text(color = "#7F8C8D", size = 12),
#     axis.text.y = element_text(color = "#7F8C8D", size = 12),
#     plot.subtitle = element_text(hjust = 0.5, size = 12, color = "purple"),
#     plot.title = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD")
#   ) +
#   labs(
#     title = "Pup Survival Probability by Maternal Age",
#     subtitle = "Terminal vs Non-Terminal Mothers",
#     x = "Mother's Age (Years)",
#     y = "Probability of Pup Survival"
#   ) +
#   scale_color_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2")) +
#   scale_fill_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2"))
```

New Data set for pup survival:

```{r}
#Data Set 
sealdat2 <- read_csv(here::here("data/raw/128L pull 2023_12_05.csv"), 
                    show_col_types = FALSE) %>% 
  mutate(observed = if_else(observed == "B", "Breeder", "Non-breeder"), 
         observed_int = if_else(observed == "Breeder", 1, 0), 
         pup_survived = pupseeneveragain > 0) %>% 
  filter(age > 3, 
         year > 1987) %>% 
  mutate(animalID = factor(animalID),
         year_fct = factor(year),
         age10 = (age - maturity) / 10,
         ageclass = ifelse(age <= maturity, "inexperienced", "experienced")) %>% 
  group_by(animalID) %>% 
  mutate(
         lastobs = ifelse(max(year) < 2020, max(age), NA),
         #Adding in biological age and assigning terminal status here
         bio_age = lastobs - age,
    terminal = ifelse(bio_age == 0, 1, 0)) %>% 
  ungroup()



#Modify to be used for survival
# Isolate pup survival/recruitment 
surv_recr_data <- sealdat2 %>% 
  drop_na(pupID) %>% 
  # Only pups born 2016 or earlier (otherwise survival biased)
  filter(pupyearborn <= 2016) %>% 
  filter(age < 20) %>% 
  mutate(pup_surv_int = as.integer(pup_survived),
         pup_recr_int = as.integer(puprecruited)) 



```

Now that we have our data sets we can try to run our first lines of code for generating a model

```{r}
#Model attempt 1:
# Fit pup *survival* model
pup_surv_mod <- glmer(
  # pup_surv_int ~ age10 + age10:ageclass + terminal:ageclass + (1 | year_fct) + (1 | animalID),
   pup_surv_int ~ age10:ageclass + terminal:ageclass + (1 | year_fct) + (1 | animalID),
  surv_recr_data,
  family = "binomial",
  control = glmerControl(optimizer = "bobyqa")
)
summary(pup_surv_mod)
#Add our survival summary:
surv_summ <- surv_recr_data %>%
  filter(age <= 19) %>%
  group_by(age) %>%
  summarize(
    n_pups = n(),
    n_surv = sum(pup_surv_int),
    perc_surv = n_surv / n_pups,
    surv_lwr = binom.test(n_surv, n_pups)$conf.int[1],
    surv_upr = binom.test(n_surv, n_pups)$conf.int[2],
    .groups = "drop"
  )


#Create prediction grid:
surv_grid <- expand_grid(
  age = 3:19,
  terminal = 0:1,
  year_fct = factor(1988:2016)
) %>%
  mutate(
    age10 = (age - maturity) / 10,
    ageclass = ifelse(age <= maturity, "inexperienced", "experienced")
  )

#Ask allison importance HEREEEE:
n_surv <- surv_recr_data %>% 
  filter(age <= 19) %>% 
  count(age)
surv_years <- count(surv_recr_data, year_fct)

#year to year predictions:
surv_pred_years <- ggpredict(
  pup_surv_mod,
  # terms = c("age10 [all]", "ageclass", "year_fct [all]"),
    terms = c("age10:ageclass", "ageclass", "year_fct [all]"),
  type = "random",
  interval = "confidence"
) %>%
  as_tibble() %>%
  rename(age10 = x) %>%
  mutate(
    ageclass = tolower(group),
    year_fct = factor(facet)
  ) %>%
  filter(
    (ageclass == "inexperienced" & age10 <= (maturity / 10)) |
    (ageclass == "experienced" & age10 > (maturity / 10))
  )



#for intervals using geom_ribbon
surv_pred_wgt <- surv_pred_years %>%
  left_join(surv_years, by = "year_fct") %>%
  group_by(age10, ageclass) %>%
  summarize(
    predicted = weighted.mean(predicted, n),
    conf_lo = weighted.mean(conf.low, n),
    conf_hi = weighted.mean(conf.high, n),
    .groups = "drop"
  )

```

Now if this all worked.. I should be able to plot??

```{r}
fig_surv <- ggplot(surv_pred_wgt, aes(x = age10, y = predicted)) +
  
  # Thin gray per-year lines
  geom_line(
    data = surv_pred_years,
    aes(x = age10, y = predicted, group = interaction(ageclass, year_fct)),
    color = "gray60",
    alpha = 0.1,
    inherit.aes = FALSE
  ) +
  
  # CI ribbon
  geom_ribbon(
    aes(ymin = conf_lo, ymax = conf_hi, fill = ageclass),
    alpha = 0.2
  ) +
  
  # Weighted mean line
  geom_line(
    aes(color = ageclass, linetype = ageclass),
    linewidth = 1.2
  ) +
  
  # Vertical maturity threshold in age10
  geom_vline(
    xintercept = 0,
    linetype = "dashed",
    color = "#9B59B6"
  ) +
  
  # Scales
  scale_y_continuous(
    name = "Offspring survival probability",
    labels = scales::percent,
    limits = c(0, 0.6)
  ) +
  scale_color_manual(
    values = c("inexperienced" = "#7fbc41", "experienced" = "#de77ae")
  ) +
  scale_fill_manual(
    values = c("inexperienced" = "#7fbc41", "experienced" = "#de77ae")
  ) +
  scale_linetype_manual(
    values = c("inexperienced" = "dashed", "experienced" = "solid")
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    legend.title = element_text(size = 13, face = "bold"),
    legend.text = element_text(size = 11)
  ) +
  labs(
    x = "Scaled Age (age10)",
    color = "Age Class",
    linetype = "Age Class",
    fill = "Age Class",
    title = "Offspring Survival by Scaled Maternal Age",
    subtitle = "Weighted model predictions across breeding years"
  )

print(fig_surv)
```

I think Lactation Duration calculation might be too hard actually.. so ima restart here!

My plan for this is to attempt to calculate lactation duration using the whole database by

1.) Modify the data set to only contain females so when "obssex" = "F" during the breeding season so when timeofyear = breeding

2.) Then contain only adult females observed with a pup

3.) Then calculation lactation duration using earliest date when "withpup" = 1 and then latest date when "withpup" = 1

```{r}
resight <- read_csv(here::here("data/raw/fullresights.csv")) %>%
  filter(obssex == "F" & timeofyear == "Breeding") %>%
  rename(year = calyear) %>%
  group_by(animalID) %>%
  mutate(
    age = year - yearborn,
    max_age = max(age, na.rm = TRUE),
    bio_age = max_age - age,
    terminal = ifelse(bio_age == 0, 1, 0)
  ) %>%
  filter(age > 2) %>%
  ungroup()


#To create lactation duration were gonna just make another object in the environment:
lact_info <- resight %>%
  filter(withpup == 1) %>%
  group_by(animalID, season, age, max_age, bio_age, terminal) %>%
  summarise(
    lact_start = min(date, na.rm = TRUE),
    lact_end = max(date, na.rm = TRUE), 
    lact_dur = as.numeric(lact_end - lact_start),
    .groups = "drop"
  ) %>%
  filter(lact_dur > 0)


```

Now that we have lactation duration more accurately calculated I think.. we can start to analyze the data again!

Trying out mcp package here!

```{r}
library(mcp)

#Defining our formula
lact_form <- list(
  lact_dur ~ age,
   ~ 0 + age,
   ~ 0 + age
)

# lact_mod <- mcp(lact_form, 
#                 lact_info)



#Maybe brms
library(brms)

```

```{r}
maturity <- 6
lact_dat2 <- lact_info %>% 
  dplyr::select(animalID, bio_age, lact_dur, season, terminal, age) %>% 
  mutate( 
    ageclass = ifelse(age <= maturity, "inexperienced", "experienced"),
    age10 = (age - maturity) / 10, 
    year_fct = factor(season))


#For some reason there is so many duplicates so we will remove those!
# resight2 <- resight2 %>% 
#   distinct(animalID, season, .keep_all = TRUE)

lact_dat2 <- lact_dat2 %>% 
  distinct(animalID, season, .keep_all = TRUE)

#Negative Binomial model
lac_mod2 <- glmer.nb(
  lact_dur ~ age10 + age10:ageclass + terminal:ageclass + (1 | season) ,
  data = lact_dat2
)

summary(lac_mod2)
summary(lac_mod2)$coefficients


#creating prediction grid (so that we can use confidence intervals later)
lac_grid2 <- expand_grid(
  age = 3:22, 
  terminal = 0:1) %>% 
  mutate(age10 = (age - maturity) / 10, 
         ageclass = ifelse(age <= maturity, "inexperienced", "experienced"))


lac_years2 <- count(lact_dat2, year_fct)

#create population predictions 
lac_pred_pop2 <- lac_grid2 %>% 
  mutate(predicted = predict(lac_mod2, 
                             newdata = lac_grid2, 
                             re.form = NA,
                             type = "response"),
         terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal")))




# Predictions vs Raw Data Plot
lact_summ2 <- lact_dat2 %>% 
  ungroup() %>% 
  mutate(terminal_fct = factor(terminal, labels = c("Nonterminal", "Terminal"))) %>% 
  group_by(age, terminal_fct, ageclass) %>% 
  summarize(mean_lact = mean(lact_dur),
            se_lact = sd(lact_dur) / sqrt(n()),
            .groups = "drop") %>% 
  mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))


#Fixed Figure to make key clearer
lac_plot2 <- ggplot(lac_pred_pop2, aes(x = age, y = predicted)) +
  
  # Pointrange with dashed error bars by terminal status (but no legend entry)
  geom_pointrange(
    data = lact_summ2,
    aes(
      y = mean_lact,
      ymin = mean_lact - 1.96 * se_lact,
      ymax = mean_lact + 1.96 * se_lact,
      color = ageclass,
      linetype = terminal_fct
    ),
    show.legend = FALSE  # prevents cluttering the legend
  ) +
  geom_line(aes(
    linetype = terminal_fct,
    color = ageclass
  ), linewidth = 1.2) +
  geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +

  # Aesthetic styling
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#F9F9F9"),
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.text.x  = element_text(color = "#7F8C8D", size = 12),
    axis.text.y  = element_text(color = "#7F8C8D", size = 12),
    plot.title   = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD"),
    legend.title = element_text(size = 13, face = "bold"),
    legend.text  = element_text(size = 11)
  ) +

  # Axis and legend labels
  labs(
    title = "Effect of Age on Lactation Duration",
    x = "Mother's Age (Years)",
    y = "Lactation Duration (days)",
    color = "Age Class",
    linetype = "Terminal Status"
  ) +

  # Distinct linetypes and color palette
  scale_linetype_manual(values = c("Nonterminal" = "solid", "Terminal" = "dotdash")) +
  scale_color_manual(values = c("#D5A6F6", "#6DD5B3")) +
  scale_fill_manual(values = c("#D5A6F6", "#9B59B6", "#66B2B2"))
print(lac_plot2)
```

Converting lactation duration model to incorporate bayesian statistics here:

```{r}
library(brms)
library(tidybayes)
library(rstan)


#Brm model for lac dur
lac_brm <- brm(
  lact_dur ~ age10 + age10:ageclass + terminal:ageclass + (1 | season),
  data   = lact_dat2,
  family = negbinomial()
)

summary(lac_brm)

# Prediction grid
lac_grid2 <- tidyr::expand_grid(
  age = 3:22,
  terminal = 0:1
) %>%
  mutate(
    age10    = (age - maturity) / 10,
    ageclass = ifelse(age <= maturity, "inexperienced", "experienced"),
    ageclass = factor(ageclass, levels = c("inexperienced","experienced")),
    terminal_fct = factor(terminal, labels = c("Nonterminal","Terminal"))
  )

# Population-level predictions (exclude random effects), with 95% CrI
pred_df <- fitted(
  lac_brm,
  newdata    = lac_grid2,
  re_formula = NA,
  summary    = TRUE,
  probs      = c(0.025, 0.975)
) %>% as_tibble()

lac_pred_pop2 <- bind_cols(lac_grid2, pred_df) %>%
  rename(
    predicted = Estimate,
    lwr       = Q2.5,
    upr       = Q97.5
  )
#This fixes my CI looking so wonky
# lac_pred_pop2 <- lac_pred_pop2 %>% arrange(age)

# Raw-data summaries 
lact_summ2 <- lact_dat2 %>%
  mutate(terminal_fct = factor(terminal, labels = c("Nonterminal","Terminal"))) %>%
  group_by(age, terminal_fct, ageclass) %>%
  summarize(
    mean_lact = mean(lact_dur),
    se_lact   = sd(lact_dur) / sqrt(n()),
    .groups   = "drop"
  ) %>%
  mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))

#  Full plot (posterior mean + 95% CrI ribbon) (hopefully..)
lac_plot2 <- ggplot(lac_pred_pop2, aes(x = age, y = predicted)) +
  geom_ribbon(
    aes(ymin = lwr, ymax = upr,
        fill = ageclass,
        group = interaction(ageclass, terminal_fct)),   # <-- key
    alpha = 0.20, show.legend = TRUE
  ) +
  geom_line(
    aes(linetype = terminal_fct, color = ageclass,
        group = interaction(ageclass, terminal_fct)),
    linewidth = 1.2
  ) +
  geom_pointrange(
    data = lact_summ2,
    aes(
      y = mean_lact,
      ymin = mean_lact - 1.96 * se_lact,
      ymax = mean_lact + 1.96 * se_lact,
      color = ageclass,
      linetype = terminal_fct
    ),
    show.legend = FALSE
  ) +
  geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +

  # styling
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "#F9F9F9", color = NA),
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.text.x  = element_text(color = "#7F8C8D", size = 12),
    axis.text.y  = element_text(color = "#7F8C8D", size = 12),
    plot.title   = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD"),
    legend.title = element_text(size = 13, face = "bold"),
    legend.text  = element_text(size = 11)
  ) +
  labs(
    title = "Effect of Age on Lactation Duration",
    x = "Mother's Age (Years)",
    y = "Lactation Duration (days)",
    color = "Age Class",
    fill  = "Age Class",
    linetype = "Terminal Status"
  ) +
  scale_linetype_manual(values = c("Nonterminal" = "solid", "Terminal" = "dotdash")) +
  scale_color_manual(values = c("#D5A6F6", "#6DD5B3")) +
  scale_fill_manual(values  = c("#D5A6F6", "#6DD5B3"))

print(lac_plot2)
```

Now that we did this ... can we do wean weight..

```{r}
#First we know that we want 3 age classes.. so lets do ages 3-6, 7-12, 13 +
prime_max <- 14
# Creating third age calss as a function 
ageclass3_fun <- function(a, mat = maturity, prime_hi = prime_max) {
  dplyr::case_when(
    a <= mat      ~ "inexperienced",
    a <= prime_hi ~ "prime",
    TRUE          ~ "experienced"
  )
}

#Data Prep
wt_dat <- bioseal %>%
  dplyr::select(animalID, bio_age, lactation_duration, year, pupsex, Wt, age) %>%
  filter(!is.na(Wt), !is.na(age)) %>%
  mutate(
    terminal   = as.integer(ifelse(bio_age == 0, 1, 0)),  # clean 0/1
    terminal_fct = factor(terminal, levels = c(0,1),
                          labels = c("Nonterminal","Terminal")),
    age10      = (age - maturity) / 10,
    ageclass3  = factor(ageclass3_fun(age),
                        levels = c("inexperienced","prime","experienced")),
    year       = factor(year),
    animalID   = factor(animalID)
  )

# Bayesian Model
wt_brm <- brm(
  Wt ~ age10 + age10:ageclass3 + terminal:ageclass3 + (1 | year) + (1 | animalID),
  data   = wt_dat,
  family = gaussian()
)

summary(wt_brm)
pp_check(wt_brm)

# ----- 3) Prediction grid -----
wt_grid <- tidyr::expand_grid(
  age = 3:22,
  terminal = 0:1
) %>%
  mutate(
    age10       = (age - maturity) / 10,
    ageclass3   = factor(ageclass3_fun(age),
                         levels = c("inexperienced","prime","experienced")),
    terminal_fct = factor(terminal, levels = c(0,1),
                          labels = c("Nonterminal","Terminal"))
  )

wt_pred <- fitted(
  wt_brm,
  newdata    = wt_grid,
  re_formula = NA,
  summary    = TRUE,
  probs      = c(0.025, 0.975)
) %>% as_tibble()

wt_pred_pop <- bind_cols(wt_grid, wt_pred) %>%
  rename(predicted = Estimate, lwr = Q2.5, upr = Q97.5) %>%
  arrange(age)

# Data Summary
wt_summ <- wt_dat %>%
  group_by(age, terminal_fct, ageclass3) %>%
  summarize(
    mean_wt = mean(Wt, na.rm = TRUE),
    se_wt   = sd(Wt,   na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  ) %>%
  mutate(age = age + 0.15 * ifelse(terminal_fct == "Terminal", 1, -1))

# Figure plot 
wt_fig <- ggplot(wt_pred_pop, aes(x = age, y = predicted)) +
  geom_ribbon(
    aes(ymin = lwr, ymax = upr, fill = ageclass3,
        group = interaction(ageclass3, terminal_fct)),
    alpha = 0.20
  ) +
  geom_line(
    aes(linetype = terminal_fct, color = ageclass3,
        group = interaction(ageclass3, terminal_fct)),
    linewidth = 1.2
  ) +
  geom_pointrange(
    data = wt_summ,
    aes(y = mean_wt,
        ymin = mean_wt - 1.96 * se_wt,
        ymax = mean_wt + 1.96 * se_wt,
        color = ageclass3,
        linetype = terminal_fct),
    show.legend = FALSE
  ) +
  geom_vline(xintercept = maturity + 0.5, linetype = "dashed", color = "#9B59B6") +
  geom_vline(xintercept = prime_max + 0.5, linetype = "dashed", color = "#9B59B6") +
  # My Theme 
  theme(
    panel.background = element_rect(fill = "#F9F9F9"),
    axis.title.x = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.title.y = element_text(color = "#8E44AD", size = 14, face = "bold"),
    axis.text.x = element_text(color = "#7F8C8D", size = 12),
    axis.text.y = element_text(color = "#7F8C8D", size = 12),
    plot.subtitle = element_text(hjust = 0.5, size = 12, color = "purple"),
    plot.title = element_text(hjust = 0.5, size = 18, face = "italic", color = "#8E44AD"),
    legend.title = element_text(size = 13, face = "bold"),
    legend.text = element_text(size = 11)
  ) +

  # Axis labels and legends
  labs(
    title = "Impact of Age on Wean Weight", 
    subtitle = "Terminal vs Non-Terminal",
    x = "Mother's Age (Years)", 
    y = "Wean Weight (kg)",
    color = "Age Class",
    linetype = "Terminal Status"
  ) +

  # My custom palette styling for lines and fill
  scale_linetype_manual(values = c("Nonterminal" = "solid", "Terminal" = "dotdash")) +
  scale_color_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2")) +
  scale_fill_manual(values = c("#D5A6F6", "#6DD5B3", "#9B59B6", "#66B2B2"))
print(wt_fig)
```
